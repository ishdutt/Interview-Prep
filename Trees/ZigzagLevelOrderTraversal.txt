/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 //TODO: STORE THE LEVEL ORDER TRAVERSAL.. AND HEIGHT.. FOR EVEN HEIGHTS, REVERSE THE ARRAY
//(STORE THE RESULTS HEIGHT WISE IN A 2D ARRAY )
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        
        
        queue<pair<TreeNode *,int>>q;
        int hd=0;
        q.push(make_pair(root,hd));
        map<int,vector<int>>m;
        vector<vector<int>>ans;
        
        if(root==NULL)  return ans;
        
        while(!q.empty())
        {
            m[q.front().second].push_back(q.front().first->val);

            if(q.front().first->left!=NULL)
                q.push(make_pair(q.front().first->left,q.front().second+1));

            if(q.front().first->right!=NULL)
                q.push(make_pair(q.front().first->right,q.front().second+1));

            q.pop();
        }
        int i=0;
        for(auto it:m)
        {
            if(i%2!=0)
            {
                reverse(it.second.begin(), it.second.end()); 
            }
            //cout<<"TEST="<<it.second[0]<<endl;

            ans.push_back(it.second);
            i++;
        }
        return ans;
    }
};